REAL-TIME CHAT APP – React + Socket.io


1. Purpose:
A real-time chat application built with React on the frontend and Node.js + Socket.io on the backend.
Features:
Send and receive messages in real-time.
Auto-simulated replies for demonstration purposes.
Tracks multiple users connecting to the server.
Styled with a modern, responsive UI.
Good for learning Socket.io, React state management, and real-time interactions.

2. Functionalities
Functionality:
Connect to server	- Establish a Socket.io connection to the backend server.
Send message	- Users can send messages using the input box.
Receive messages	- Messages from all users (or simulated auto-replies) are displayed in real-time.
Auto-reply	- Backend emits a simulated reply after sending a message.
UI updates	- Messages are styled differently if sent or received.
Start chat	- Chat starts after clicking the “Start Chat” button.

3 Components / Routes
 (a)Frontend – React
Main Components:
App.jsx
Establishes the Socket.io connection.
Passes the socket to ChatWindow component.

(b) Chat.jsx
Manages chat state: messages, current input, and user name.
Sends messages via socket.emit('sendMessage').
Receives messages via socket.on('receiveMessage').

(c) Backend – Node.js + Socket.io
server.js
Listens for connections and logs them.
Receives messages via sendMessage event.
Broadcasts all messages to every connected client via receiveMessage.

. Valid Cases / Test Scenarios
Scenario	         Input / Action	                         Expected Outcome
Start chat	         Click Start Chat button	             Chat UI appears with message box
Send valid message	 Type "Hello" and press Enter or Send	  Message appears in chat, simulated reply appears after 0.8s
Multiple users	     Open two browser tabs	                  Messages appear in both tabs in real-time
Special characters	  Send "Hi! @#$%"	                      Message displays correctly
Rapid messages	      Send 5 messages quickly	              All messages appear in order, auto-replies respond correctly
Empty message	      Send ""	                              No message sent, nothing happen


5. Invalid / Edge Cases
Scenario	                           Input / Action	                                Expected Outcome
Backend disconnected	              Server stopped	                            Error in console, messages not sent
Socket URL incorrect	              io('http://localhost:1234')	                Connection fails, console shows error
Null input	                          null or undefined message	                    Message ignored, no crash
Long messages	                     >500 characters	                             Message wraps in chat box, no UI break
Multiple simultaneous auto-replies	Send message while previous reply pending	     Replies appear correctly in order

7. Learning Outcomes
1) Built a real-time chat app using React + Socket.io + Node.js.
2) Practiced state management in React for messages and inputs.
3) Learned event-driven communication with Socket.io (emit and on).
4) Implemented auto-reply simulation for UX demonstration.
5) Styled chat with flexbox and modern UI elements.